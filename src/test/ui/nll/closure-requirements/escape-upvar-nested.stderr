note: External requirements
  --> $DIR/escape-upvar-nested.rs:31:32
   |
31 |             let mut closure1 = || p = &y;
   |                                ^^^^^^^^^
   |
   = note: defining type: [closure@$DIR/escape-upvar-nested.rs:31:32: 31:41<i16, extern "rust-call" fn(()), &'_#1r mut &'_#2r i32, &'_#3r i32>]
   = note: number of external vids: 4
   = note: where '_#3r: '_#2r

note: External requirements
  --> $DIR/escape-upvar-nested.rs:30:27
   |
30 |           let mut closure = || {
   |  ___________________________^
31 | |             let mut closure1 = || p = &y;
32 | |             closure1();
33 | |         };
   | |_________^
   |
   = note: defining type: [closure@$DIR/escape-upvar-nested.rs:30:27: 33:10<i16, extern "rust-call" fn(()), &'_#1r mut &'_#2r i32, &'_#3r i32>]
   = note: number of external vids: 4
   = note: where '_#3r: '_#2r

error[E0597]: `**y` does not live long enough (Ast)
  --> $DIR/escape-upvar-nested.rs:31:40
   |
31 |             let mut closure1 = || p = &y;
   |                                --      ^ does not live long enough
   |                                |
   |                                capture occurs here
...
36 |     }
   |     - borrowed value only lives until here
...
39 | }
   | - borrowed value needs to live until here

note: No external requirements
  --> $DIR/escape-upvar-nested.rs:23:1
   |
23 | / fn test() {
24 | |     let x = 44;
25 | |     let mut p = &x;
26 | |
...  |
38 | |     deref(p);
39 | | }
   | |_^
   |
   = note: defining type: fn() {test}

error[E0597]: borrowed value does not live long enough (Mir)
  --> $DIR/escape-upvar-nested.rs:36:6
   |
28 |         let y = 22;
   |             - temporary value created here
...
36 |     }
   |      ^ temporary value dropped here while still borrowed
   |
   = note: consider using a `let` binding to increase its lifetime

error: aborting due to 2 previous errors


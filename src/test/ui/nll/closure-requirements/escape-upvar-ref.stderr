note: External requirements
  --> $DIR/escape-upvar-ref.rs:26:27
   |
26 |         let mut closure = || p = &y;
   |                           ^^^^^^^^^
   |
   = note: defining type: [closure@$DIR/escape-upvar-ref.rs:26:27: 26:36<i16, extern "rust-call" fn(()), &'_#1r mut &'_#2r i32, &'_#3r i32>]
   = note: number of external vids: 4
   = note: where '_#3r: '_#2r

error[E0597]: `y` does not live long enough (Ast)
  --> $DIR/escape-upvar-ref.rs:26:35
   |
26 |         let mut closure = || p = &y;
   |                           --      ^ does not live long enough
   |                           |
   |                           capture occurs here
27 |         closure();
28 |     }
   |     - borrowed value only lives until here
...
31 | }
   | - borrowed value needs to live until here

note: No external requirements
  --> $DIR/escape-upvar-ref.rs:20:1
   |
20 | / fn test() {
21 | |     let x = 44;
22 | |     let mut p = &x;
23 | |
...  |
30 | |     deref(p);
31 | | }
   | |_^
   |
   = note: defining type: fn() {test}

error[E0597]: borrowed value does not live long enough (Mir)
  --> $DIR/escape-upvar-ref.rs:28:6
   |
25 |         let y = 22;
   |             - temporary value created here
...
28 |     }
   |      ^ temporary value dropped here while still borrowed
   |
   = note: consider using a `let` binding to increase its lifetime

error: aborting due to 2 previous errors

